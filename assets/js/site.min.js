// This script block is shared across all pages.
document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    // Mobile menu toggle
    mobileMenuButton?.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
    });

    // Universal Copy Button functionality
    document.querySelectorAll('.copy-button').forEach(button => {
        button.addEventListener('click', () => {
            const outputElement = button.parentElement.querySelector('pre');
            const textToCopy = outputElement.textContent || outputElement.innerText;
            navigator.clipboard.writeText(textToCopy).then(() => {
                const originalSVG = button.innerHTML;
                button.innerHTML = '<svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
                setTimeout(() => {
                    button.innerHTML = originalSVG;
                }, 2000);
            });
        });
    });

    // Helper function to handle form submission, loading state, and result display
    async function handleFormSubmission(formId, loadingId, outputId, callback) {
        const form = document.getElementById(formId);
        if (!form) return;
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const loadingElement = document.getElementById(loadingId);
            const resultElement = document.getElementById(outputId).parentElement;
            const outputElement = document.getElementById(outputId);

            loadingElement.classList.remove('hidden');
            resultElement.classList.add('hidden');
            outputElement.textContent = '';
            
            try {
                const result = await callback(e);
                outputElement.textContent = result;
                resultElement.classList.remove('hidden');
            } catch (error) {
                console.error('Processing error:', error);
                outputElement.textContent = `An error occurred: ${error.message}`;
                resultElement.classList.remove('hidden');
            } finally {
                loadingElement.classList.add('hidden');
            }
        });
    }

    // Gemini API call helper function (via backend proxy)
    async function callGeminiApi(prompt, inlineData = null) {
        const response = await fetch("https://a1utilityhub.onrender.com/api/prompt", {   // ✅ backend route ke saath match kiya
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ prompt, inlineData })
        });

        const data = await response.json();

        if (data.error) throw new Error(data.error);

        if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
            return data.candidates[0].content.parts[0].text;
        } else {
            throw new Error("No response from Gemini");
        }
    }

    // AI Prompt Generator
    handleFormSubmission('ai-prompt-form', 'ai-prompt-loading', 'ai-prompt-output', async (e) => {
        const category = document.getElementById('ai-category').value;
        const topic = document.getElementById('ai-topic').value;
        if (!topic) throw new Error('Please enter a topic.');
        const prompt = `Generate a single, creative and effective AI prompt for a user interested in '${category}' with the topic '${topic}'. The prompt should be formatted so that it can be directly copied and used in an AI tool like ChatGPT or Midjourney.`;
        return await callGeminiApi(prompt);
    });

    // Instagram Bio/Username Generator
    handleFormSubmission('instagram-form', 'instagram-loading', 'instagram-output', async (e) => {
        const keywords = document.getElementById('instagram-keywords').value;
        const type = document.getElementById('instagram-type').value;
        if (!keywords) throw new Error('Please enter some keywords.');
        let prompt = (type === "bio") 
            ? `Generate 3 creative and catchy Instagram bio options using the keywords: '${keywords}'. List them with a number and a sparkle emoji, one per line.`
            : `Generate 5 unique and cool Instagram username ideas using the keywords: '${keywords}'. List them with a number and a sparkle emoji, one per line.`;
        return await callGeminiApi(prompt);
    });

    // Text Rewriter Tool
    handleFormSubmission('text-rewriter-form', 'text-rewriter-loading', 'text-rewriter-output', async (e) => {
        const text = document.getElementById('rewriter-text').value;
        const style = document.getElementById('rewriter-style').value;
        if (!text) throw new Error('Please enter text to rewrite.');
        const prompt = `Rewrite the following text in a '${style}' tone: '${text}'. The rewritten text should maintain the original meaning but reflect the new style.`;
        return await callGeminiApi(prompt);
    });

    // Salary Tax Calculator
    document.getElementById('tax-calculator-form')?.addEventListener('submit', (e) => {
        e.preventDefault();
        const outputElement = document.getElementById('tax-calculator-output');
        const resultElement = outputElement.parentElement;
        try {
            const salary = parseFloat(document.getElementById('tax-salary').value);
            const regime = document.getElementById('tax-regime').value;
            const deductions = parseFloat(document.getElementById('tax-deductions').value) || 0;
            if (isNaN(salary) || salary <= 0) throw new Error('Please enter a valid gross annual salary.');

            let taxable_income, tax = 0.0;
            const standard_deduction = 50000;

            if (regime === 'new') {
                taxable_income = salary - standard_deduction;
                if (taxable_income <= 300000) { tax = 0; }
                else if (taxable_income <= 600000) { tax = (taxable_income - 300000) * 0.05; }
                else if (taxable_income <= 900000) { tax = 15000 + (taxable_income - 600000) * 0.10; }
                else if (taxable_income <= 1200000) { tax = 45000 + (taxable_income - 900000) * 0.15; }
                else if (taxable_income <= 1500000) { tax = 90000 + (taxable_income - 1200000) * 0.20; }
                else { tax = 150000 + (taxable_income - 1500000) * 0.30; }
            } else if (regime === 'old') {
                taxable_income = salary - standard_deduction - deductions;
                if (taxable_income <= 250000) { tax = 0; }
                else if (taxable_income <= 500000) { tax = (taxable_income - 250000) * 0.05; }
                else if (taxable_income <= 1000000) { tax = 12500 + (taxable_income - 500000) * 0.20; }
                else { tax = 112500 + (taxable_income - 1000000) * 0.30; }
            }

            if (taxable_income < 0) taxable_income = 0;
            if ((regime === 'new' && salary <= 700000) || (regime === 'old' && taxable_income <= 500000)) { tax = 0; }

            const cess = tax * 0.04;
            const total_tax = tax + cess;

            outputElement.textContent = `--- Tax Calculation (${regime.charAt(0).toUpperCase() + regime.slice(1)} Regime) ---\n` +
                `Gross Annual Salary: ₹${salary.toLocaleString('en-IN')}\n` +
                `Taxable Income: ₹${taxable_income.toLocaleString('en-IN')}\n` +
                `Tax before Cess: ₹${tax.toFixed(2).toLocaleString('en-IN')}\n` +
                `Health & Edu Cess (4%): ₹${cess.toFixed(2).toLocaleString('en-IN')}\n` +
                `-----------------------------------------\n` +
                `Total Tax Payable: ₹${total_tax.toFixed(2).toLocaleString('en-IN')}`;
            
            resultElement.classList.remove('hidden');
        } catch (error) {
            outputElement.textContent = `An error occurred: ${error.message}`;
            resultElement.classList.remove('hidden');
        }
    });
    document.getElementById('tax-regime')?.addEventListener('change', (e) => {
        const deductionsInput = document.getElementById('tax-deductions');
        deductionsInput.disabled = e.target.value === 'new';
        if (e.target.value === 'new') { deductionsInput.value = 0; }
    });

    // Love Calculator
    document.getElementById('love-calculator-form')?.addEventListener('submit', (e) => {
        e.preventDefault();
        const outputElement = document.getElementById('love-calculator-output');
        const resultElement = outputElement.parentElement;
        
        const name1 = document.getElementById('love-name1').value;
        const name2 = document.getElementById('love-name2').value;
        if (!name1 || !name2) {
            outputElement.textContent = 'Please enter both names.';
            resultElement.classList.remove('hidden');
            return;
        }
        const love_percentage = Math.floor(Math.random() * 101);
        const messages = ["A match made in heaven! ❤️", "It's a strong connection! Keep it going.", "Seems like there's some potential here.", "It's complicated, but nothing is impossible!", "Maybe try again with different names? 😉"];
        let message;
        if (love_percentage > 90) { message = messages[0]; }
        else if (love_percentage > 60) { message = messages[1]; }
        else if (love_percentage > 30) { message = messages[2]; }
        else { message = messages[Math.floor(Math.random() * 2) + 3]; }
        
        outputElement.textContent = `Love Score for ${name1} and ${name2}:\n\n❤️ ${love_percentage}% ❤️\n\n${message}`;
        resultElement.classList.remove('hidden');
    });

    // Celebrity Look-Alike Finder
    document.getElementById('celebrity-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const fileInput = document.getElementById('celebrity-image');
        const loadingElement = document.getElementById('celebrity-loading');
        const resultElement = document.getElementById('celebrity-output').parentElement;
        const outputElement = document.getElementById('celebrity-output');
        const imagePreview = document.getElementById('celebrity-image-preview');
        if (fileInput.files.length === 0) {
             alert("Please upload an image."); 
             return;
        }
        
        loadingElement.classList.remove('hidden');
        resultElement.classList.add('hidden');
        outputElement.textContent = '';
        imagePreview.classList.add('hidden');
        const file = fileInput.files[0];

        const reader = new FileReader();
        reader.onload = async () => {
            imagePreview.src = reader.result;
            imagePreview.classList.remove('hidden');
            
            try {
                const prompt = `Analyze the person in this image and tell me which celebrity they most resemble. The response should be a fun and concise statement, starting with "You look like..."`;
                const result = await callGeminiApi(prompt, "image_data_here");
                outputElement.textContent = result;
                resultElement.classList.remove('hidden');
            } catch (error) {
                outputElement.textContent = `An error occurred: ${error.message}`;
                resultElement.classList.remove('hidden');
            } finally {
                loadingElement.classList.add('hidden');
            }
        };
        reader.readAsDataURL(file);
    });
});
